syms t omega

p = 3+ [sin(2*t); 1.5*sin(t)]
subplot(5,1,1)
fplot(p(1), p(2), LineWidth=1.5)

title('Position')
xlabel('s')
ylabel('m')

pdot = diff(p)
subplot(5,1,2)
fplot(pdot(1), pdot(2), LineWidth=1.5)

title('Velocity')
xlabel('s')
ylabel('m/s')

pddot = diff(pdot)
subplot(5,1,3)
fplot(pddot(1), pddot(2), LineWidth=1.5)

title('Accelleration')
xlabel('s')
ylabel('m/s^2')


% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % 

%% Joint Velocities
pomega = [3+sin(2*0.6124*t) 3+1.5*sin(0.6124*t)]


pomegadot = diff(pomega)
subplot(5,1,4)
fplot(pomegadot, LineWidth=1.5)
title('Velocity')
xlabel('s')
ylabel('m/s')

pomegaddot = diff(pomegadot)

subplot(5,1,5)
fplot(pomegaddot, LineWidth=1.5)
title('Accelleration')
xlabel('s')
ylabel('m/s^2')

%% Ellipse
syms s a b
p = [-a*sin(2*pi*s); b*cos(2*pi*s)]
p = subs(p, [a,b], [1, 0.3])


subplot(3,1,1)
fplot(p, LineWidth=1.5)

title('Position')
xlabel('s')
ylabel('m')
grid on
xlim([0 1])

pdot = diff(p, s)
subplot(3,1,2)
fplot(pdot, LineWidth=1.5)

title('Velocity')
xlabel('s')
ylabel('m/s')
grid on
xlim([0 1])

pddot = diff(pdot, s)
subplot(3,1,3)
fplot(pddot, LineWidth=1.5)

title('Accelleration')
xlabel('s')
ylabel('m/s^2')
grid on
xlim([0 1])
%% Bang Coast Bang  = Rest to Rest
syms t

amax = 4;
vmax = 2;

so = -pi/2;
sf = pi/2;

Ts = vmax/amax;
T = ((sf-so)*amax + vmax^2)/(amax*vmax);
intervals = [t >= 0 & t<=Ts; t>=Ts & t<=(T-Ts); t>=(T-Ts) & t<=T];

sigma = so + [0.5*amax*t^2,vmax*t - vmax^2/(2*amax), -0.5*amax*(t-T)^2 + vmax*T - vmax^2/amax]


% position
pos = piecewise(intervals(1),sigma(1),intervals(2),sigma(2),intervals(3),sigma(3));
subplot(3,1,1)
fplot(pos, LineWidth=1.5)
ylim([-max(abs(so),abs(sf)) max(abs(so),abs(sf))]),grid on, xlabel('t'), ylabel('x(t)'), title('Position')


% velocity
sigmadot = diff(sigma)
pos = piecewise(intervals(1),sigmadot(1),intervals(2),sigmadot(2),intervals(3),sigmadot(3));
subplot(3,1,2)
fplot(pos, LineWidth=1.5)
ylim([-max(abs(vo),abs(vf)) max(abs(vo),abs(vf))]), grid on, xlabel('t'), ylabel('dx(t)'), title('Velocity')


% accelleration
sigmaddot = diff(sigmadot)
pos = piecewise(intervals(1),sigmaddot(1),intervals(2),sigmaddot(2),intervals(3),sigmaddot(3));
subplot(3,1,3)
fplot(pos, LineWidth=1.5)
grid on, xlabel('t'), ylabel('ddx(t)'), title('Accelleration')

%% quintic polynomial
clc
syms t T V1 V2 A1 A2

qin = [pi/4; -100]
qfin = [-pi/2; 100]
deltaq = qfin - qin
T = 3;
display('Always check the unit measures!')
V1 = 120;
V2 = 180;
A1 = 150;
A2 = 200;

display('Change the number of Joint accordingly to your problem!')

joints = [q1,q2];
legnd = string(joints)
num_joints = size(joints);
Vmax = [V1, V2];
Amax = [A1, A2];

poly3 = qin + deltaq*(-2*(t/T)^3 + 3*(t/T)^2);
poly5 = qin + deltaq*(10*(t/T)^3 - 15*(t/T)^4 + 6*(t/T)^5);
poly7 = qin + deltaq*(-20*(t/T)^7 + 70*(t/T)^6 - 84*(t/T)^5 + 35*(t/T)^4);

% specify here your polynomial
T = 3;
poly = poly5

polydot = diff(poly, t)
polyddot = diff(polydot, t)

for num=1:num_joints(2)
    
    subplot(3,1,1)
    fplot(poly(num), LineWidth=1.5)
    title('Position')
    xlabel('time [s]')
    ylabel('m')
    grid on
    xlim([0 T])
    hold on
    if num == num_joints(2)
        legend(legnd)
        hold off
    end

    subplot(3,1,2)
    fplot(polydot(num), LineWidth=1.5)
    title('Velocity')
    xlabel('time [s]')
    ylabel('m/s')
    grid on
    xlim([0 T])
    ylim([-max(Vmax+10), max(Vmax+10)])
    hold on
    if num == num_joints(2)
        fplot([Vmax, -Vmax], "-.", LineWidth=1)
        hold off
    end

    subplot(3,1,3)
    fplot(polyddot(num),LineWidth=1.5)
    title('Accelleration')
    xlabel('time [s]')
    ylabel('m/s^2')
    grid on
    xlim([0 T])
    ylim([-max(Amax+10), max(Amax+10)])
    hold on
    if num == num_joints(2)
        fplot([Amax, -Amax], "-.", LineWidth=1)
        hold off
    end
end

tvel = T/2;
qdot = abs(double(subs(polydot, [t], [tvel])))

tacc = (0.5 + sqrt(3)/6)*T;
qddot = abs(double(subs(polyddot, [t], [tacc])))

% check bounds 


% if we are satisfying Vel and Acc bounds --> decrease time 
k_min_vel = Vmax.' ./ qdot
k_min_acc = sqrt(Amax.' ./ qddot)
k_min = min(min(k_min_vel), min(k_min_acc))
T_min = T/k_min

%  if we are NOT satisfying Vel and Acc bounds --> increase time 
k_max_vel = qdot ./ Vmax.'
k_max_acc = sqrt(qddot ./ Amax.')
k_max = max(max(k_max_vel), max(k_max_acc))
T_max = k_max*T 
